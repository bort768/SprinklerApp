// <auto-generated />
using System;
using DataBaseService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GateApiSpirinklerApp.Migrations
{
    [DbContext(typeof(SprinklerAppDbContext))]
    [Migration("20241003170523_AddNewStuff")]
    partial class AddNewStuff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Current", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("clouds")
                        .HasColumnType("int");

                    b.Property<double>("dew_point")
                        .HasColumnType("float");

                    b.Property<int>("dt")
                        .HasColumnType("int");

                    b.Property<double>("feels_like")
                        .HasColumnType("float");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<int>("pressure")
                        .HasColumnType("int");

                    b.Property<int>("sunrise")
                        .HasColumnType("int");

                    b.Property<int>("sunset")
                        .HasColumnType("int");

                    b.Property<double>("temp")
                        .HasColumnType("float");

                    b.Property<double>("uvi")
                        .HasColumnType("float");

                    b.Property<int>("visibility")
                        .HasColumnType("int");

                    b.Property<int>("wind_deg")
                        .HasColumnType("int");

                    b.Property<double>("wind_speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Currents");
                });

            modelBuilder.Entity("Model.HistoryOfIrrigation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AmountOfWaterUsed")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("SprinklerId")
                        .HasColumnType("int");

                    b.Property<long>("SprinklerId1")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.Property<long>("TankId1")
                        .HasColumnType("bigint");

                    b.Property<double>("WaterLevelBefore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SprinklerId1");

                    b.HasIndex("TankId1");

                    b.ToTable("HistoryOfIrrigations");
                });

            modelBuilder.Entity("Model.HistoryOfTankWaterLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("TankId")
                        .HasColumnType("bigint");

                    b.Property<double>("WaterLevel")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TankId");

                    b.ToTable("HistoryOfTankWaterLevels");
                });

            modelBuilder.Entity("Model.Hourly", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("WeatherRootId")
                        .HasColumnType("bigint");

                    b.Property<int>("clouds")
                        .HasColumnType("int");

                    b.Property<double>("dew_point")
                        .HasColumnType("float");

                    b.Property<int>("dt")
                        .HasColumnType("int");

                    b.Property<double>("feels_like")
                        .HasColumnType("float");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<double>("pop")
                        .HasColumnType("float");

                    b.Property<int>("pressure")
                        .HasColumnType("int");

                    b.Property<double>("temp")
                        .HasColumnType("float");

                    b.Property<double>("uvi")
                        .HasColumnType("float");

                    b.Property<int>("visibility")
                        .HasColumnType("int");

                    b.Property<int>("wind_deg")
                        .HasColumnType("int");

                    b.Property<double>("wind_gust")
                        .HasColumnType("float");

                    b.Property<double>("wind_speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("WeatherRootId");

                    b.ToTable("Hourlies");
                });

            modelBuilder.Entity("Model.IrrigationSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("MinimumTankLevel")
                        .HasColumnType("float");

                    b.Property<int>("SprinklerId")
                        .HasColumnType("int");

                    b.Property<long>("SprinklerId1")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.Property<long>("TankId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SprinklerId1");

                    b.HasIndex("TankId1");

                    b.ToTable("IrrigationSchedules");
                });

            modelBuilder.Entity("Model.LocalNames", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("af")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("am")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("an")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ascii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("av")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("az")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ba")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("be")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("br")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("co")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("da")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("de")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("el")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("en")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("es")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("et")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("feature_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("he")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ht")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("io")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("is")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("it")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("km")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ky")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("li")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ln")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("my")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("na")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ny")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("om")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("or")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("os")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("se")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("si")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("so")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sq")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("st")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("su")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("te")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("th")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("yi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("yo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalNames");
                });

            modelBuilder.Entity("Model.LocationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<long>("local_namesId")
                        .HasColumnType("bigint");

                    b.Property<double>("lon")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("local_namesId");

                    b.ToTable("LocationInfos");
                });

            modelBuilder.Entity("Model.Minutely", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("WeatherRootId")
                        .HasColumnType("bigint");

                    b.Property<int>("dt")
                        .HasColumnType("int");

                    b.Property<int>("precipitation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeatherRootId");

                    b.ToTable("Minutelies");
                });

            modelBuilder.Entity("Model.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("APi_RasPi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APi_key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Theme")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Model.Sprinkler", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Sprinklers");
                });

            modelBuilder.Entity("Model.Tank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("FillLevel")
                        .HasColumnType("float");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("Model.Weather", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<long?>("CurrentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HourlyId")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("main")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("HourlyId");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("Model.WeatherRoot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("currentId")
                        .HasColumnType("bigint");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lon")
                        .HasColumnType("float");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timezone_offset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("currentId");

                    b.ToTable("WeatherRoots");
                });

            modelBuilder.Entity("Model.HistoryOfIrrigation", b =>
                {
                    b.HasOne("Model.Sprinkler", "Sprinkler")
                        .WithMany()
                        .HasForeignKey("SprinklerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprinkler");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("Model.HistoryOfTankWaterLevel", b =>
                {
                    b.HasOne("Model.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("Model.Hourly", b =>
                {
                    b.HasOne("Model.WeatherRoot", null)
                        .WithMany("hourly")
                        .HasForeignKey("WeatherRootId");
                });

            modelBuilder.Entity("Model.IrrigationSchedule", b =>
                {
                    b.HasOne("Model.Sprinkler", "Sprinkler")
                        .WithMany()
                        .HasForeignKey("SprinklerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprinkler");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("Model.LocationInfo", b =>
                {
                    b.HasOne("Model.LocalNames", "local_names")
                        .WithMany()
                        .HasForeignKey("local_namesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("local_names");
                });

            modelBuilder.Entity("Model.Minutely", b =>
                {
                    b.HasOne("Model.WeatherRoot", null)
                        .WithMany("minutely")
                        .HasForeignKey("WeatherRootId");
                });

            modelBuilder.Entity("Model.Weather", b =>
                {
                    b.HasOne("Model.Current", null)
                        .WithMany("weather")
                        .HasForeignKey("CurrentId");

                    b.HasOne("Model.Hourly", null)
                        .WithMany("weather")
                        .HasForeignKey("HourlyId");
                });

            modelBuilder.Entity("Model.WeatherRoot", b =>
                {
                    b.HasOne("Model.Current", "current")
                        .WithMany()
                        .HasForeignKey("currentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("current");
                });

            modelBuilder.Entity("Model.Current", b =>
                {
                    b.Navigation("weather");
                });

            modelBuilder.Entity("Model.Hourly", b =>
                {
                    b.Navigation("weather");
                });

            modelBuilder.Entity("Model.WeatherRoot", b =>
                {
                    b.Navigation("hourly");

                    b.Navigation("minutely");
                });
#pragma warning restore 612, 618
        }
    }
}
